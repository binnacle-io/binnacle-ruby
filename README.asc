== Binnacle Ruby Client

#### Ruby Client for the RESTful Distributed Event Logging and Multi-channel Push Service

....
__/\\\______________________________________________________________________________/\\\\\\____________________
_\/\\\_____________________________________________________________________________\////\\\____________________
_\/\\\__________/\\\__________________________________________________________________\/\\\____________________
_\/\\\_________\///____/\\/\\\\\\_____/\\/\\\\\\_____/\\\\\\\\\_________/\\\\\\\\_____\/\\\_________/\\\\\\\\__
_\/\\\\\\\\\____/\\\__\/\\\////\\\___\/\\\////\\\___\////////\\\______/\\\//////______\/\\\_______/\\\/////\\\_
_\/\\\////\\\__\/\\\__\/\\\__\//\\\__\/\\\__\//\\\____/\\\\\\\\\\____/\\\_____________\/\\\______/\\\\\\\\\\\__
_\/\\\__\/\\\__\/\\\__\/\\\___\/\\\__\/\\\___\/\\\___/\\\/////\\\___\//\\\____________\/\\\_____\//\\///////___
_\/\\\\\\\\\___\/\\\__\/\\\___\/\\\__\/\\\___\/\\\__\//\\\\\\\\/\\___\///\\\\\\\\___/\\\\\\\\\___\//\\\\\\\\\\_
_\/////////____\///___\///____\///___\///____\///____\////////\//______\////////___\/////////_____\//////////__
....

Overview
========
Send events and log messages to Binnacle

Drop in replacement for Ruby's Logger (See http://www.ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html)

### Status

image:https://www.codeship.io/projects/495e6480-8fb0-0132-ebb3-32b8c1ae92e1/status?branch=master[CI Status]
image:https://codeclimate.com/repos/54d3783be30ba050f40008cc/badges/bf0112289505ae5a4b5b/gpa.svg[
"Code Climate",link="https://codeclimate.com/repos/54d3783be30ba050f40008cc/feed"]
image:https://codeclimate.com/repos/54d3783be30ba050f40008cc/badges/bf0112289505ae5a4b5b/coverage.svg[
"Test Coverage",link="https://codeclimate.com/repos/54d3783be30ba050f40008cc/feed"]

Building
========
- Build the Gem: `gem build binnacle.gemspec`
- Install the Gem Locally: `gem install ./binnacle-0.0.1.gem`

Usage
=====

### Via Ruby Client

Build an instance of Logging Adapter passing the following Binnacle configuration
values (get them from you App page on the Binnacle Website):

```
require 'binnacle'

client = Binnacle::Client.new('smx0kqbr0wbxnfpdalr5', '3hwkt7kcgtta2wqxy96c', 'http://localhost:8080')
client.signal('5ujzd7gwk8ikmvnqv1w7', 'event_from_client', 'binnacle-ruby', '001', 'INFO')
```

Parameters to Client.new:

- account_id: Your Binnacle Account ID (`BINNACLE_ACCOUNT`)
- app_id: Your Binnacle App ID (`BINNACLE_APP`)
- endpoint_url: The Binnacle Endpoint URL (`BINNACLE_URL`)

All these values can be configured as ENV variables (variable name in parenthesis)

Parameters to signal:

- context_id: Your default Binnacle Context ID (`BINNACLE_CTX`)
- event_name: The name of the event
- client_id: Use for system/subsystem/component id/name
- session_id: Use to track a user session across requests/processes
- log_level: UNKNOWN, FATAL, ERROR, WARN, INFO, DEBUG
- tags (optional): An Array of tags, e.g. `['accounts', 'refunds', 'dispute']`
- json (optional): A Ruby Hash, e.g. `{ message: "there you are!" }`

### Via Ruby/Rails Logging

Build an instance of Logging Adapter (which wraps the Binnacle Client):

```
require 'binnacle'

logger = Binnacle::Logging.new('smx0kqbr0wbxnfpdalr5', '3hwkt7kcgtta2wqxy96c', '5ujzd7gwk8ikmvnqv1w7', 'http://localhost:8080')

logger.info("This is an info message")
logger.debug("This is an debug message")
```

Parameters to Logging.new:

- account_id: Your Binnacle Account ID (`BINNACLE_ACCOUNT`)
- app_id: Your Binnacle App ID (`BINNACLE_APP`)
- logging_context_id: Your default Binnacle Context ID (`BINNACLE_CTX`)
- endpoint_url: The Binnacle Endpoint URL (`BINNACLE_URL`)

The following log statement:

```
logger.info("hey")
```

results in the following message being sent to Binnacle:

```
{
  "accountId": "smx0kqbr0wbxnfpdalr5",
  "appId": "3hwkt7kcgtta2wqxy96c",
  "contextId": "5ujzd7gwk8ikmvnqv1w7",
  "sessionId": "",
  "clientEventTime": "2015-01-31T08:55:19-0700",
  "eventName": "log",
  "clientId": "",
  "logLevel": "INFO",
  "tags": [],
  "json": {"message":"hey"}
}
```

#### Switching context and passing other parameters

We override Ruby's logger 'progname' parameter to pass a Hash where you can specify
Binnacle's signal remaining parameters (session_id, event_name, client_id, tags)

For example, the following log statement:

```
logger.info(context_id: 'xxx', session_id: '8675309', event_name: 'failed_transfer') { 'transfer failed, bad RTN' }
```

Will post to Binnacle under the event name `failed_transfer`, to the context with id `xxx`
and with `session_id` equal to `8675309`.

In the hash you can pass `context_id`, `session_id`, `event_name`, `client_id`, `tags`, `json`

If instead of a Hash you pass a String the `event_name` will be assigned its value.

Integration
===========

### Rails 3.x

In config/environments/production.rb:

```
RailsApplication::Application.configure do
  config.logger = Binnacle::Logging.new('smx0kqbr0wbxnfpdalr5', '3hwkt7kcgtta2wqxy96c', '5ujzd7gwk8ikmvnqv1w7', 'http://localhost:8080')
end
```

### Rails 4

Create config/initializers/binnacle.rb:

```
binnacle = Binnacle::Logging.new('smx0kqbr0wbxnfpdalr5', '3hwkt7kcgtta2wqxy96c', '5ujzd7gwk8ikmvnqv1w7', 'http://localhost:8080')
Rails.logger.extend(ActiveSupport::Logger.broadcast(binnacle))
```

Binnacle Executable
===================

Installing the client gem provides the `binnacle` executable which provides the following features:

### Tail

Use `tail -f` subcommand passing the host and channel of the Binnacle App or Context to tail:

```
binnacle tail -f --host=localhost:8080 --channel=qeovrwov99r890l7oyc5-4vdtbzrutvhunjq9it9v-uel4k7d1mtxp5b7h8q5
```

### Recent Events

User `tail -n=10 --since=10` subcommand passing the host and channel of the Binnacle App or Context and how many events to retrieve

`lines` : maximum number of events to retrieve
`since` : number of minutes in the past (defaults to 5 minutes)

```
binnacle tail --lines=50 --host=localhost:8080 --channel=qeovrwov99r890l7oyc5-4vdtbzrutvhunjq9it9v-uel4k7d1mtxp5b7h8q5
```
